
CREATE TABLE Position
(Position_id SERIAL PRIMARY KEY NOT NULL,
X INT NOT NULL,
Y INT NOT NULL
);

CREATE TABLE Dimension
(
    Dimension_id SERIAL PRIMARY KEY NOT NULL,
    Width Float NOT NULL,
    Height Float NOT NULL 
);

CREATE TABLE Cover
(
    Cover_id SERIAL PRIMARY KEY NOT NULL,
    CoverType VARCHAR(50) NOT NULL,
    CoverDiecutUrl VARCHAR(255) NOT NULL
);

    CREATE TABLE Diecut
    (
        Diecut_id SERIAL PRIMARY KEY NOT NULL,
        Cover_id INTEGER,
        CoverDiecutDimension INTEGER,
        FOREIGN KEY (Cover_id) REFERENCES Cover(Cover_id),
        FOREIGN KEY (CoverDiecutDimension) REFERENCES Dimension(Dimension_id)
    );

CREATE TABLE PdfSize
(
    PdfSize_id SERIAL PRIMARY KEY NOT NULL,
    PageDimension INTEGER,
    DiecutDimension INTEGER,
    FOREIGN KEY (PageDimension) REFERENCES Dimension(Dimension_id),
    FOREIGN KEY (DiecutDimension) REFERENCES Dimension(Dimension_id)
);

CREATE TABLE DiecutPositionPdf
(
    DiecutPositionPdf_id SERIAL PRIMARY KEY NOT NULL,
    Position_id INTEGER,
    FOREIGN KEY (Position_id) REFERENCES Position(Position_id)
);

CREATE TABLE Customizable
(
    Customizable_id SERIAL PRIMARY KEY NOT NULL,
    BackgroundColor BOOLEAN NOT NULL,
    Pattern BOOLEAN NOT NULL,
    Text BOOLEAN NOT NULL,
    Image BOOLEAN NOT NULL
);

CREATE TABLE SidePositionDiecut
(
    SidePositionDiecut_id SERIAL PRIMARY KEY NOT NULL,
    Position_id INTEGER NOT NULL,
    FOREIGN KEY (Position_id) REFERENCES Position(Position_id)
);

CREATE TABLE SideName
(
    SideName_id SERIAL PRIMARY KEY NOT NULL,
    Name VARCHAR(200) NOT NULL
);

CREATE TABLE SideDetails
(
    SideDetails_id SERIAL PRIMARY KEY NOT NULL,
    Dimension_id INTEGER NOT NULL,
    Customizable_id INTEGER NOT NULL,
    SidePositionDiecut_id INTEGER NOT NULL,
    SideName_id INTEGER NOT NULL,
    Icon VARCHAR(100) NOT NULL,
    Ratio float NOT NULL,
    FOREIGN KEY (Dimension_id) REFERENCES Dimension(Dimension_id),
    FOREIGN KEY (Customizable_id) REFERENCES Customizable(Customizable_id),
    FOREIGN KEY (SidePositionDiecut_id) REFERENCES SidePositionDiecut(SidePositionDiecut_id),
    FOREIGN KEY (SideName_id) REFERENCES SideName(SideName_id)
)


CREATE TABLE BookInformation
(
    BookInformation_id SERIAL PRIMARY KEY NOT NULL,
    BookName VARCHAR(50) NOT NULL,
    BookSku VARCHAR(50) NOT NULL,
    BookModel VARCHAR(50) NOT NULL
);




CREATE TABLE Book2d
(
    Book2d_id SERIAL PRIMARY KEY NOT NULL,
    BookInformation_id INTEGER NOT NULL,
    Cover_id INTEGER NOT NULL,
    Diecut_id INTEGER NOT NULL,
    PdfSize_id INTEGER NOT NULL,
    DiecutPositionPdf_id INTEGER NOT NULL,
    SideDetails_id INTEGER NOT NULL,
                Book3d_id INTEGER,
    FOREIGN KEY (Cover_id) REFERENCES Cover(Cover_id),
    FOREIGN KEY (BookInformation_id) REFERENCES BookInformation(BookInformation_id),
    FOREIGN KEY (Diecut_id) REFERENCES Diecut(Diecut_id),
    FOREIGN KEY (PdfSize_id) REFERENCES PdfSize(PdfSize_id),
    FOREIGN KEY (DiecutPositionPdf_id) REFERENCES DiecutPositionPdf(DiecutPositionPdf_id),
    FOREIGN KEY (SideDetails_id) REFERENCES SideDetails(SideDetails_id)
);


















-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.book2d
(
    book2d_id integer NOT NULL DEFAULT nextval('book2d_book2d_id_seq'::regclass),
    bookinformation_id integer NOT NULL,
    cover_id integer NOT NULL,
    diecut_id integer NOT NULL,
    pdfsize_id integer NOT NULL,
    diecutpositionpdf_id integer NOT NULL,
    sidedetails_id integer NOT NULL,
    book3d_id integer,
    CONSTRAINT book2d_pkey PRIMARY KEY (book2d_id)
);

CREATE TABLE IF NOT EXISTS public.bookinformation
(
    bookinformation_id integer NOT NULL DEFAULT nextval('bookinformation_bookinformation_id_seq'::regclass),
    bookname character varying(50) COLLATE pg_catalog."default" NOT NULL,
    booksku character varying(50) COLLATE pg_catalog."default" NOT NULL,
    bookmodel character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT bookinformation_pkey PRIMARY KEY (bookinformation_id)
);

CREATE TABLE IF NOT EXISTS public.cover
(
    cover_id integer NOT NULL DEFAULT nextval('cover_cover_id_seq'::regclass),
    covertype character varying(50) COLLATE pg_catalog."default" NOT NULL,
    coverdiecuturl character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT cover_pkey PRIMARY KEY (cover_id)
);

CREATE TABLE IF NOT EXISTS public.customizable
(
    customizable_id integer NOT NULL DEFAULT nextval('customizable_customizable_id_seq'::regclass),
    backgroundcolor boolean NOT NULL,
    pattern boolean NOT NULL,
    text boolean NOT NULL,
    image boolean NOT NULL,
    CONSTRAINT customizable_pkey PRIMARY KEY (customizable_id)
);

CREATE TABLE IF NOT EXISTS public.diecut
(
    diecut_id integer NOT NULL DEFAULT nextval('diecut_diecut_id_seq'::regclass),
    cover_id integer,
    coverdiecutdimension integer,
    CONSTRAINT diecut_pkey PRIMARY KEY (diecut_id)
);

CREATE TABLE IF NOT EXISTS public.diecutpositionpdf
(
    diecutpositionpdf_id integer NOT NULL DEFAULT nextval('diecutpositionpdf_diecutpositionpdf_id_seq'::regclass),
    position_id integer,
    CONSTRAINT diecutpositionpdf_pkey PRIMARY KEY (diecutpositionpdf_id)
);

CREATE TABLE IF NOT EXISTS public.dimension
(
    dimension_id integer NOT NULL DEFAULT nextval('dimension_dimension_id_seq'::regclass),
    width double precision NOT NULL,
    height double precision NOT NULL,
    CONSTRAINT dimension_pkey PRIMARY KEY (dimension_id)
);

CREATE TABLE IF NOT EXISTS public.pdfsize
(
    pdfsize_id integer NOT NULL DEFAULT nextval('pdfsize_pdfsize_id_seq'::regclass),
    pagedimension integer,
    diecutdimension integer,
    CONSTRAINT pdfsize_pkey PRIMARY KEY (pdfsize_id)
);

CREATE TABLE IF NOT EXISTS public."position"
(
    position_id integer NOT NULL DEFAULT nextval('position_position_id_seq'::regclass),
    x integer NOT NULL,
    y integer NOT NULL,
    CONSTRAINT position_pkey PRIMARY KEY (position_id)
);

CREATE TABLE IF NOT EXISTS public.sidedetails
(
    sidedetails_id integer NOT NULL DEFAULT nextval('sidedetails_sidedetails_id_seq'::regclass),
    dimension_id integer NOT NULL,
    customizable_id integer NOT NULL,
    sidepositiondiecut_id integer NOT NULL,
    sidename_id integer NOT NULL,
    icon character varying(100) COLLATE pg_catalog."default" NOT NULL,
    ratio double precision NOT NULL,
    CONSTRAINT sidedetails_pkey PRIMARY KEY (sidedetails_id)
);

CREATE TABLE IF NOT EXISTS public.sidename
(
    sidename_id integer NOT NULL DEFAULT nextval('sidename_sidename_id_seq'::regclass),
    name character varying(200) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT sidename_pkey PRIMARY KEY (sidename_id)
);

CREATE TABLE IF NOT EXISTS public.sidepositiondiecut
(
    sidepositiondiecut_id integer NOT NULL DEFAULT nextval('sidepositiondiecut_sidepositiondiecut_id_seq'::regclass),
    position_id integer NOT NULL,
    CONSTRAINT sidepositiondiecut_pkey PRIMARY KEY (sidepositiondiecut_id)
);

ALTER TABLE IF EXISTS public.book2d
    ADD CONSTRAINT book2d_bookinformation_id_fkey FOREIGN KEY (bookinformation_id)
    REFERENCES public.bookinformation (bookinformation_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.book2d
    ADD CONSTRAINT book2d_cover_id_fkey FOREIGN KEY (cover_id)
    REFERENCES public.cover (cover_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.book2d
    ADD CONSTRAINT book2d_diecut_id_fkey FOREIGN KEY (diecut_id)
    REFERENCES public.diecut (diecut_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.book2d
    ADD CONSTRAINT book2d_diecutpositionpdf_id_fkey FOREIGN KEY (diecutpositionpdf_id)
    REFERENCES public.diecutpositionpdf (diecutpositionpdf_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.book2d
    ADD CONSTRAINT book2d_pdfsize_id_fkey FOREIGN KEY (pdfsize_id)
    REFERENCES public.pdfsize (pdfsize_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.book2d
    ADD CONSTRAINT book2d_sidedetails_id_fkey FOREIGN KEY (sidedetails_id)
    REFERENCES public.sidedetails (sidedetails_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.diecut
    ADD CONSTRAINT diecut_cover_id_fkey FOREIGN KEY (cover_id)
    REFERENCES public.cover (cover_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.diecut
    ADD CONSTRAINT diecut_coverdiecutdimension_fkey FOREIGN KEY (coverdiecutdimension)
    REFERENCES public.dimension (dimension_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.diecutpositionpdf
    ADD CONSTRAINT diecutpositionpdf_position_id_fkey FOREIGN KEY (position_id)
    REFERENCES public."position" (position_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.pdfsize
    ADD CONSTRAINT pdfsize_diecutdimension_fkey FOREIGN KEY (diecutdimension)
    REFERENCES public.dimension (dimension_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.pdfsize
    ADD CONSTRAINT pdfsize_pagedimension_fkey FOREIGN KEY (pagedimension)
    REFERENCES public.dimension (dimension_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.sidedetails
    ADD CONSTRAINT sidedetails_customizable_id_fkey FOREIGN KEY (customizable_id)
    REFERENCES public.customizable (customizable_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.sidedetails
    ADD CONSTRAINT sidedetails_dimension_id_fkey FOREIGN KEY (dimension_id)
    REFERENCES public.dimension (dimension_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.sidedetails
    ADD CONSTRAINT sidedetails_sidename_id_fkey FOREIGN KEY (sidename_id)
    REFERENCES public.sidename (sidename_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.sidedetails
    ADD CONSTRAINT sidedetails_sidepositiondiecut_id_fkey FOREIGN KEY (sidepositiondiecut_id)
    REFERENCES public.sidepositiondiecut (sidepositiondiecut_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.sidepositiondiecut
    ADD CONSTRAINT sidepositiondiecut_position_id_fkey FOREIGN KEY (position_id)
    REFERENCES public."position" (position_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;